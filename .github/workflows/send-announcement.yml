name: Send Message to Service Owners

on:
  workflow_dispatch:
    inputs:
      message:
        description: "Message to send to service owners"
        required: true
        type: string
      port_payload:
        required: true
        description: "Port's payload, including details for who triggered the action and general context (blueprint, run id, etc...)"
        type: string

jobs:
  find_services:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Search for Consuming Services
        id: search
        uses: port-labs/port-github-action@v1
        env: 
          sending_api: ${{ fromJson(inputs.port_payload).payload.entity.identifier }}
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          runId: ${{ fromJson(inputs.port_payload).context.runId }}
          operation: SEARCH
          query: |
            {
                "combinator": "and",
                "rules": [
                    {
                        "property": "$blueprint",
                        "operator": "=",
                        "value": "service"
                    },
                    {
                        "blueprint": "api",
                        "operator": "relatedTo",
                        "value": "${{ env.sending_api }}"
                    }
                ]
            }
            
      - name: Save Entities as JSON
        run: |
          echo ${{ steps.search.outputs.entities }} > entities.json

      - name: Send Slack Notifications
        run: |
          python ./scripts/send_slack_notifications.py entities.json ${{ github.event.inputs.message }} ${{ fromJson(inputs.port_payload).payload.entity.title }}

      - name: Notify Port
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          operation: PATCH_RUN
          baseUrl: https://api.getport.io
          runId: ${{ fromJson(inputs.port_payload).context.runId }}
          logMessage: |
            Message sent to consuming services. Details:
              * Message: ${{ github.event.inputs.message }}
              * Target Entity: ${matrix.service.title}