name: Send Message to Service Owners

on:
  workflow_dispatch:
    inputs:
      message:
        description: "Message to send to service owners"
        required: true
        type: string
      port_payload:
        required: true
        description: "Port's payload, including details for who triggered the action and general context (blueprint, run id, etc...)"
        type: string

jobs:
  find_services:
    runs-on: ubuntu-latest
    outputs:
      consuming_services: ${{ steps.search.outputs.entities }}  # Output array of consuming service entities
    steps:
    - name: Get Bearer Token
      id: get_token
      run: |
        response=$(curl -X POST -H "Content-Type: application/json" -d '{
          "clientId": "'${{ secrets.PORT_CLIENT_ID }}'",
          "clientSecret": "'${{ secrets.PORT_CLIENT_SECRET }}'"
        }' https://api.getport.io/v1/auth/access_token)
        token=$(echo "$response" | jq -r '.accessToken')
        echo "::set-output name=token::$token"

    - name: Search for Consuming Services
      id: search
      env:
        token: ${{ steps.get_token.outputs.token }}
      run: |
        token=${{ steps.get_token.outputs.token }}
        sending_api=$(echo ${{ fromJson(inputs.port_payload).payload.entity.identifier }})
        response=$(curl -X POST -H "
          Content-Type: application/json
          Authorization: Bearer $token
          " -d '{
            "combinator": "and",
            "rules": [
                {
                    "property": "$blueprint",
                    "operator": "=",
                    "value": "service"
                },
                {
                    "blueprint": "api",
                    "operator": "relatedTo",
                    "value": "$sending_api"
                }
            ]
          }' https://api.getport.io/v1/entities/search?exclude_calculated_properties=false&compact=false&attach_title_to_relation=false)

        entities=$(echo "$response" | jq -r '.entities')
        
        # get the title and slack property of each entity
        consuming_services=$(echo "$entities" | jq -r '.[] | {title: .title, url: .properties.slack}')
        echo "::set-output name=consuming_services::$consuming_services"

      # - name: Search for Consuming Services
      #   id: search
      #   uses: port-labs/port-github-action@v1
      #   env: 
      #     sending_api: ${{ fromJson(inputs.port_payload).payload.entity.identifier }}
      #   with:
      #     clientId: ${{ secrets.PORT_CLIENT_ID }}
      #     clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
      #     runId: ${{ fromJson(inputs.port_payload).context.runId }}
      #     operation: SEARCH
      #     query: |
      #       {
      #           "combinator": "and",
      #           "rules": [
      #               {
      #                   "property": "$blueprint",
      #                   "operator": "=",
      #                   "value": "service"
      #               },
      #               {
      #                   "blueprint": "api",
      #                   "operator": "relatedTo",
      #                   "value": "${{ env.sending_api }}"
      #               }
      #           ]
      #       }
          
      # - name: Format Output
      #   id: format_output
      #   env:
      #     entities: ${{ fromJson(steps.search.outputs.entities) }}
      #   run: |
      #     # print title and slack property of each entity
      #     echo "::set-output name=entities::$(echo "${{ env.entities }}" | jq -r '.[] | {title: .title, url: .properties.slack}')"
      
  send_notifications:
    runs-on: ubuntu-latest
    needs: find_services   # Dependency on the find_services job
    strategy:
      matrix:
        service: ${{ needs.find_services.outputs.consuming_services }}  # Matrix iterates over entities
    steps:
      - name: Extract Fields from Output
        id: extract_fields
        run: |
          echo "${{ matrix.service }}"  # Print the entity data to the console
          echo "::set-output name=slack::$(echo "${{ matrix.service }}" | jq -r '.properties.slack')"  # Set the slack output 
  
      - name: Send Slack Notification
        run: |
          entity=$(echo "${{ matrix.service }}" | jq -r '.')  # Extract entity data
          title=$(echo "${entity}" | jq -r '.title')
          slack=$(echo "${entity}" | jq -r '.properties.slack')
          message="${{ github.event.inputs.message }} - ${title}"
          curl -X POST -H 'Content-type: application/json' --data "{\"text\":\"$message\"}" $slack

      - name: Notify Port
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          operation: PATCH_RUN
          baseUrl: https://api.getport.io
          runId: ${{ fromJson(inputs.port_payload).context.runId }}
          logMessage: |
            Message sent to consuming services. Details:
              * Message: ${{ github.event.inputs.message }}
              * Target Entity: ${matrix.service.title}