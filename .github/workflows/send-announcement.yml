name: Send Message to Service Owners

on:
  workflow_dispatch:
    inputs:
      message:
        description: "Message to send to service owners"
        required: true
        type: string
      port_payload:
        required: true
        description: "Port's payload, including details for who triggered the action and general context (blueprint, run id, etc...)"
        type: string

jobs:
  send-message-to-service-owners:
    runs-on: ubuntu-latest

    steps:
      - name: Search for Consuming Services
        id: search
        uses: port-labs/port-github-action@v1
        env: 
          sending_api: ${{ fromJson(inputs.port_payload).payload.entity.identifier }}
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          runId: ${{ fromJson(inputs.port_payload).context.runId }}
          operation: SEARCH
          query: |
            {
                "combinator": "and",
                "rules": [
                    {
                        "property": "$blueprint",
                        "operator": "=",
                        "value": "service"
                    },
                    {
                        "blueprint": "api",
                        "operator": "relatedTo",
                        "value": "${{ env.sending_api }}"
                    }
                ]
            }

      - name: Extract entities from search results
        id: extract_entities
        run: |
            # save the entities to a  json file
            echo "${{ steps.search.outputs.entities }}" > entities.json

      - name: Send Slack Notification
        if: ${{ steps.search.outputs.entities > 0 }}
        run: |
          # loop through the entities and send a slack message to each one with the message from the input and with the title of the entity
          for entity in $(echo "${{ steps.search.outputs.entities }}" | jq -r '.[] | @base64'); do
              _entity() {
                  echo "${1}" | base64 --decode
              }
              title=$(_entity $(echo "${entity}" | jq -r '.title'))
              slack=$(_entity $(echo "${entity}" | jq -r '.properties.slack'))
              message="${{ github.event.inputs.message }} - ${title}"
              curl -X POST -H 'Content-type: application/json' --data "{\"text\":\"$message\"}" $slack
          done

      - name: Notify Port
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          operation: PATCH_RUN
          baseUrl: https://api.getport.io
          runId: ${{ fromJson(inputs.port_payload).context.runId }}
          logMessage: |
            Message sent to entities
