name: Manage EKS Cluster

on:
  workflow_dispatch:
    inputs:
      cluster_name:
        description: "Name of the EKS cluster"
        required: true
      region:
        description: "AWS Region for the cluster"
        required: true
      action:
        description: "Action to perform (apply/destroy)"
        required: true
        default: "apply"
      port_payload:
        required: true
        description: "Port's payload (who triggered, context, etc...)"
        type: string


jobs:
  manage_cluster: # Combine into a single job
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./terraform/create-eks-cluster

    if: ${{ github.event.inputs.action == 'apply' || github.event.inputs.action == 'destroy' }}

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      PORT_CLIENT_ID: ${{ secrets.PORT_CLIENT_ID }}
      PORT_CLIENT_SECRET: ${{ secrets.PORT_CLIENT_SECRET }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Create a log message (apply)
        if: ${{ github.event.inputs.action == 'apply' }}
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{fromJson(inputs.port_payload).context.runId}}
          logMessage: "Initiating creation of EKS cluster: ${{ inputs.cluster_name }}."

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init
        run: terraform init

      - name: Terraform Format
        run: terraform fmt

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Apply
        id: terraform_apply
        if: ${{ github.event.inputs.action == 'apply' }}
        run: terraform apply -auto-approve
        env:
          TF_VAR_cluster_name: ${{ github.event.inputs.cluster_name }}
          TF_VAR_region: ${{ github.event.inputs.region }}
          TF_VAR_port_run_id: ${{ fromJson(inputs.port_payload).context.runId }}

      - name: Add entity to port.yml file
        if: ${{ github.event.inputs.action == 'apply' }}
        run: |
          echo "identifier: ${{ steps.terraform_apply.outputs.cluster_arn }}" >> ./catalog/port.yml
          echo "title: ${{ steps.terraform_apply.outputs.cluster_name }}" >> ./port.yml
          echo "blueprint: ${{ fromJson(inputs.port_payload).context.blueprint }}" >> ./catalog/port.yml
          echo "properties:" >> ./catalog/port.yml
          echo "  name: ${{ github.event.inputs.cluster_name }}" >> ./catalog/port.yml
          echo "  endpoint: ${{ steps.terraform_apply.outputs.cluster_endpoint }}" >> ./catalog/port.yml
          echo "relations:" >> ./catalog/port.yml
          echo "  region: ${{ github.event.inputs.region }}" >> ./catalog/port.yml


      - name: Terraform Destroy
        if: ${{ github.event.inputs.action == 'destroy' }}
        run: terraform destroy -auto-approve
        env:
          TF_VAR_cluster_name: ${{ github.event.inputs.cluster_name }}
          TF_VAR_region: ${{ github.event.inputs.region }}
          TF_VAR_port_run_id: ${{ fromJson(inputs.port_payload).context.runId }}

      - name: Create a log message (post-action)
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{fromJson(inputs.port_payload).context.runId}}
          logMessage: "${
            if eq(github.event.inputs.action, 'apply')
              'EKS cluster creation has been completed: ${{ github.event.inputs.cluster_name }}.'
            else
              'EKS cluster destruction has been completed: ${{ github.event.inputs.cluster_name }}.'
            }"
