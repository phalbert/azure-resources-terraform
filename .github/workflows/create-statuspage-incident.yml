name: Create Statuspage Incident and Notify Port

on:
  workflow_dispatch:
    inputs:
      incident_title:
        description: "Title of the incident"
        required: true
      incident_message:
        description: "Description of the incident"
        required: true
      incident_severity:
        description: "Severity: none, minor, major, critical"
        required: true
        type: choice
        options:
          - none
          - minor
          - major
          - critical
      incident_status:
        description: "Status: investigating, identified, monitoring, resolved"
        required: true
        type: choice
        options:
          - investigating
          - identified
          - monitoring
          - resolved
      status_page:
        description: "Statuspage page ID"
        required: false
      affected_components:
        description: "List of components affected by the incident"
        required: false
      port_context: # Input for Port context (JSON)
        description: "Port context (JSON format)"
        required: true

# If Ocean is enabled, the STATUSPAGE_PAGE_ID will be set in the context 
# since the self service action is created against the Statuspage entity
env:
  STATUSPAGE_PAGE_ID: ${{ inputs.status_page || secrets.STATUSPAGE_PAGE_ID }}


jobs:
  create_statuspage_incident:
    runs-on: ubuntu-latest
    steps:
      - name: Notify Port (Initial)
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          operation: PATCH_RUN
          runId: ${{ fromJson(inputs.port_context).runId }}
          logMessage: |
            Creating Statuspage incident: ${{ inputs.incident_title }}

      - name: Create Statuspage Incident
        id: create_incident
        run: |
          echo "Creating Statuspage incident: ${{ inputs.incident_title }} in status page: ${{ env.STATUSPAGE_PAGE_ID }}"
          
          payload='{
              "incident": {
                "name": "${{ inputs.incident_title }}",
                "body": "${{ inputs.incident_message }}",
                "status": "${{ inputs.incident_status }}",
                "impact_override": "${{ inputs.incident_severity }}",
                "deliver_notifications": true,
                "component_ids": ${{ inputs.affected_components }},
                "metadata": {
                  "port": {
                    "runId": "${{ fromJson(inputs.port_context).runId }}",
                    "triggeredBy": "${{ fromJson(inputs.port_context).trigger.by.user.email }}"
                  }
                }
              }
            }'
          
          # Add scheduled fields only if the incident is scheduled
          if [[ "${{ inputs.incident_status }}" =~ ^(scheduled|in_progress|verifying|completed)$ ]]; then
            # Calculate default start and end times for scheduled maintenance (next hour, 3 hours duration)
            start_time=$(date -u -d "+1 hour" +%Y-%m-%dT%H:%M:%S.000Z)
            end_time=$(date -u -d "+4 hours" +%Y-%m-%dT%H:%M:%S.000Z)

            payload=$(echo "$payload" | jq --arg start_time "$start_time" --arg end_time "$end_time" '.incident += {"scheduled_for": $start_time, "scheduled_until": $end_time, "scheduled_remind_prior": true, "scheduled_auto_in_progress": true, "scheduled_auto_completed": true}')
          fi
          
          echo "$payload"

          response=$(curl -s -X POST "https://api.statuspage.io/v1/pages/${{ env.STATUSPAGE_PAGE_ID }}/incidents" \
            -H "Authorization: OAuth ${{ secrets.STATUSPAGE_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d "$payload")

          echo "$response"
          echo "INCIDENT=$response" >> $GITHUB_ENV
          echo "$response" > incident.json

          incident_id=$(echo "$response" | jq -r '.id')
          impact=$(echo "$response" | jq -r '.impact')
          status=$(echo "$response" | jq -r '.status')
          created_at=$(echo "$response" | jq -r '.created_at')
          updated_at=$(echo "$response" | jq -r '.updated_at')
          started_at=$(echo "$response" | jq -r '.started_at')
          resolved_at=$(echo "$response" | jq -r '.resolved_at')
          scheduled_until=$(echo "$response" | jq -r '.scheduled_until')
          scheduled_for=$(echo "$response" | jq -r '.scheduled_for')
          scheduled_auto_in_progress=$(echo "$response" | jq -r '.scheduled_auto_in_progress')
          scheduled_auto_completed=$(echo "$response" | jq -r '.scheduled_auto_completed')
          scheduled_remind_prior=$(echo "$response" | jq -r '.scheduled_remind_prior')
          scheduled_reminded_at=$(echo "$response" | jq -r '.scheduled_reminded_at')
          reminder_intervals=$(echo "$response" | jq -r '.reminder_intervals')
          metadata=$(echo "$response" | jq -r '.metadata')
          component_ids=$(echo "$response" | jq -r '.component_ids')

          echo "INCIDENT_ID=$incident_id" >> $GITHUB_ENV
          echo "IMPACT=$impact" >> $GITHUB_ENV
          echo "STATUS=$status" >> $GITHUB_ENV
          echo "CREATED_AT=$created_at" >> $GITHUB_ENV
          echo "UPDATED_AT=$updated_at" >> $GITHUB_ENV
          echo "STARTED_AT=$started_at" >> $GITHUB_ENV
          echo "RESOLVED_AT=$resolved_at" >> $GITHUB_ENV
          echo "SCHEDULED_UNTIL=$scheduled_until" >> $GITHUB_ENV
          echo "SCHEDULED_FOR=$scheduled_for" >> $GITHUB_ENV
          echo "SCHEDULED_AUTO_IN_PROGRESS=$scheduled_auto_in_progress" >> $GITHUB_ENV
          echo "SCHEDULED_AUTO_COMPLETED=$scheduled_auto_completed" >> $GITHUB_ENV
          echo "SCHEDULED_REMIND_PRIOR=$scheduled_remind_prior" >> $GITHUB_ENV
          echo "SCHEDULED_REMINDED_AT=$scheduled_reminded_at" >> $GITHUB_ENV
          echo "REMINDER_INTERVALS=$reminder_intervals" >> $GITHUB_ENV
          echo "METADATA=$metadata" >> $GITHUB_ENV
          echo "COMPONENT_IDS=$component_ids" >> $GITHUB_ENV


      - name: Print Incident
        env:
          incident: ${{ steps.create_incident.outputs.INCIDENT }}
        run: |
          echo "${{ env.INCIDENT_ID }}"
          echo "${{ env.IMPACT }}"
          echo "${{ env.STATUS }}"
          
      
      - name: Upsert Entity in Port
        uses: port-labs/port-github-action@v1
        with:
          identifier: ${{ fromJson(steps.create_incident.outputs.INCIDENT).id }}
          title: ${{ fromJson(steps.create_incident.outputs.INCIDENT).name }}
          team: "[]"
          icon: DefaultBlueprint
          blueprint: ${{ fromJson(inputs.port_context).blueprint }}
          properties: |-
            {
              "impact": "${{ fromJson(steps.create_incident.outputs.INCIDENT).impact }}",
              "status": "${{ fromJson(steps.create_incident.outputs.INCIDENT).status }}",
              "createdAt": "${{ fromJson(steps.create_incident.outputs.INCIDENT).created_at }}",
              "updatedAt": "${{ fromJson(steps.create_incident.outputs.INCIDENT).updated_at }}",
              "startedAt": "${{ fromJson(steps.create_incident.outputs.INCIDENT).started_at }}",
              "resolvedAt": "${{ fromJson(steps.create_incident.outputs.INCIDENT).resolved_at }}",
              "scheduled_until": "${{ fromJson(steps.create_incident.outputs.INCIDENT).scheduled_until }}",
              "scheduled_for": "${{ fromJson(steps.create_incident.outputs.INCIDENT).scheduled_for }}",
              "scheduled_auto_in_progress": "${{ fromJson(steps.create_incident.outputs.INCIDENT).scheduled_auto_in_progress }}",
              "scheduled_auto_completed": "${{ fromJson(steps.create_incident.outputs.INCIDENT).scheduled_auto_completed }}",
              "scheduled_remind_prior": "${{ fromJson(steps.create_incident.outputs.INCIDENT).scheduled_remind_prior }}",
              "scheduled_reminded_at": "${{ fromJson(steps.create_incident.outputs.INCIDENT).scheduled_reminded_at }}",
              "metadata": ${{ fromJson(steps.create_incident.outputs.INCIDENT).metadata }},
              "reminder_intervals": "${{ fromJson(steps.create_incident.outputs.INCIDENT).reminder_intervals }}",
              "pageId": "${{ env.STATUSPAGE_PAGE_ID }}",
              "component_ids": "${{ inputs.affected_components }}"
            }
          relations: |-
            {
              "statuspage": "${{ env.STATUSPAGE_PAGE_ID }}"
            }
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          operation: UPSERT
          runId: ${{ fromJson(inputs.port_context).runId }}
      

      - name: Notify Port (Initial)
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          operation: PATCH_RUN
          runId: ${{ fromJson(inputs.port_context).runId }}
          status: "SUCCESS"
          logMessage: |
            Finished creating Statuspage incident: ${{ inputs.incident_title }}
