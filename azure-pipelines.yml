trigger: none

pool: Default

resources:
  webhooks:
    - webhook: PortWebhook
      connection: PortWebhook

variables:
  - group: port-credentials
  - name: STORAGE_NAME
    value: ${{ parameters.PortWebhook.payload.properties.storage_name }}
  - name: STORAGE_LOCATION
    value: ${{ parameters.PortWebhook.payload.properties.storage_location }}
  - name: PORT_RUN_ID
    value: ${{ parameters.PortWebhook.context.runId }}

stages:
- stage: Setup
  jobs:
  - job: SetupJob
    displayName: 'Setup'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      displayName: 'Checkout repository'
    
    - bash: |
        startedAt=$(date -u +%Y-%m-%dT%H:%M:%S.000Z)
        echo "##vso[task.setvariable variable=startedAt]$startedAt"
        echo "Started at $startedAt"
      displayName: 'Set Start Time'
    
    - script: |
        sudo apt-get update
        sudo apt-get install -y jq
      displayName: Install jq

    - script: |
        accessToken=$(curl -X POST \
              -H 'Content-Type: application/json' \
              -d '{"clientId": "$(PORT_CLIENT_ID)", "clientSecret": "$(PORT_CLIENT_SECRET)"}' \
              -s 'https://api.getport.io/v1/auth/access_token' | jq -r '.accessToken')
        echo "##vso[task.setvariable variable=accessToken;isOutput=true]$accessToken"
        echo "Token: $accessToken"
      displayName: 'Fetch Access Token'
      name: fetchPortAccessToken

- stage: Deployment
  dependsOn:
    - Setup
  jobs:
  - job: DeployJob
    displayName: 'Deploy to Azure and Port'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - bash: |      
        terraform init -input=false
      displayName: 'Initialize configuration'
      failOnStderr: true

    - script: |
        terraform validate
      displayName: 'Terraform Validate'

    - script: |
        tf_plan_and_apply() {
            local plan_type=$1
            local target_option=""
            
            if [ "$plan_type" == "azure" ]; then
              target_option="-target=azurerm_storage_account.storage_account"
            fi

            terraform plan \
              -input=false \
              -out=tf${plan_type}-${BUILD_BUILDNUMBER}.tfplan \
              -var="storage_account_name=${STORAGE_NAME}" \
              -var="location=${STORAGE_LOCATION}" \
              $target_option

            terraform apply -auto-approve -input=false tf${plan_type}-${BUILD_BUILDNUMBER}.tfplan
        }

        tf_plan_and_apply azure
        tf_plan_and_apply port
      displayName: 'Terraform changes to Azure and Port'
      name: tf_plan_and_apply
      env:
        TF_VAR_resource_group_name: arete-resources
        TF_VAR_port_client_id: $(PORT_CLIENT_ID)
        TF_VAR_port_client_secret: $(PORT_CLIENT_SECRET)
        TF_VAR_port_run_id: $(PORT_RUN_ID)

- stage: NotifyAndStatus
  dependsOn:
    - Setup
    - Deployment
  jobs:
  - job: NotifyAndStatusJob
    displayName: 'Notify Port and Update Run Status'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - script: |
        completedAt=$(date -u +%Y-%m-%dT%H:%M:%S.000Z)
        terraform_output=$(terraform output endpoint_url | sed 's/"//g')
        echo ${terraform_output}

        curl -X PATCH \
          -H 'Content-Type: application/json' \
          -H 'Authorization: Bearer $(fetchPortAccessToken.accessToken)' \
          -d '{
              "status": "SUCCESS",
              "message": {"run_status":"Completed resource creation at $(completedAt)", "url":"$(terraform_output)" }
            }' \
          "https://api.getport.io/v1/actions/runs/$(PORT_RUN_ID)"
      displayName: 'Update Run Status'
