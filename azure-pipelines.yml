trigger: none

# pool:
#   vmImage: 'ubuntu-latest'
pool: Default


resources:
  webhooks:
    - webhook: PortWebhook
      connection: PortWebhook

variables:
  PORT_RUN_ID: "${{ parameters.PortWebhook.context.runId }}"
  BLUEPRINT_ID: "${{ parameters.PortWebhook.context.blueprint }}"
  SERVICE_NAME: "${{ parameters.PortWebhook.payload.properties.service_name }}"
  DESCRIPTION: "${{ parameters.PortWebhook.payload.properties.description }}"
  STORAGE_NAME: "${{ parameters.PortWebhook.payload.properties.storage_name }}"
  STORAGE_LOCATION: "${{ parameters.PortWebhook.payload.properties.storage_location }}"


steps:

- checkout: self
  displayName: 'Checkout repository'

- bash: |
    startedAt=$(date -u +%Y-%m-%dT%H:%M:%S.000Z)
    echo "Using variable from the variable group: $(PORT_CLIENT_ID)"
    echo "##vso[task.setvariable variable=startedAt]$startedAt"
    echo "$(ARM_CLIENT_ID)"
  env:
    ARM_CLIENT_ID: $(azure-service-principal.sp_clientId)
    ARM_CLIENT_SECRET: $(azure-service-principal.sp_clientSecret)

- script: |
    apt-get update
    apt-get install -y jq
- script: |
    accessToken=$(curl -X POST \
          -H 'Content-Type: application/json' \
          -d '{"clientId": "$(PORT_CLIENT_ID)", "clientSecret": "$(PORT_CLIENT_SECRET)"}' \
          -s 'https://api.getport.io/v1/auth/access_token' | jq -r '.accessToken')
    echo "##vso[task.setvariable variable=accessToken;isOutput=true]$accessToken"
  displayName: Fetch Access Token and Run ID
  name: getToken

- bash: |
    terraform init -input=false
  env:
    ARM_CLIENT_ID: $(azure-service-principal.sp_clientId)
    ARM_CLIENT_SECRET: $(azure-service-principal.sp_clientSecret)
    ARM_SUBSCRIPTION_ID: $(azure-service-principal.sp_subscriptionId)
    ARM_TENANT_ID: $(azure-service-principal.sp_tenantId)
  displayName: Initialize configuration
  failOnStderr: true

- script: |
    terraform validate
  displayName: 'Terraform Validate'

- script: |
    terraform plan -out=tfazure -var="storage_account_name=$(STORAGE_NAME)" -var="location=$(STORAGE_LOCATION)" -var="port_run_id=$(PORT_RUN_ID)"  -target=azurerm_storage_account.storage_account
    terraform apply -auto-approve -input=false tfazure
  env:
    TF_VAR_port_client_id: PORT_CLIENT_ID
    TF_VAR_port_client_secret: PORT_CLIENT_SECRET
    ARM_CLIENT_ID: $(azure-service-principal.sp_clientId)
    ARM_CLIENT_SECRET: $(azure-service-principal.sp_clientSecret)
    ARM_SUBSCRIPTION_ID: $(azure-service-principal.sp_subscriptionId)
    ARM_TENANT_ID: $(azure-service-principal.sp_tenantId)
  displayName: 'Plan Terraform changes to Azure'
  condition: succeeded()

- script: |
    terraform apply -auto-approve -input=false tfazure
  env:
    TF_VAR_port_client_id: PORT_CLIENT_ID
    TF_VAR_port_client_secret: PORT_CLIENT_SECRET
    ARM_CLIENT_ID: $(azure-service-principal.sp_clientId)
    ARM_CLIENT_SECRET: $(azure-service-principal.sp_clientSecret)
    ARM_SUBSCRIPTION_ID: $(azure-service-principal.sp_subscriptionId)
    ARM_TENANT_ID: $(azure-service-principal.sp_tenantId)
  displayName: 'Applying Terraform changes to Azure'
  condition: succeeded()

- script: |
    terraform plan -out=tfport -var="storage_account_name=$(STORAGE_NAME)" -var="location=$(STORAGE_LOCATION)" -var="port_run_id=$(PORT_RUN_ID)"  -var="location=$(location)"
    terraform apply -auto-approve -input=false tfport
  env:
    TF_VAR_port_client_id: PORT_CLIENT_ID
    TF_VAR_port_client_secret: PORT_CLIENT_SECRET
    ARM_CLIENT_ID: $(azure-service-principal.sp_clientId)
    ARM_CLIENT_SECRET: $(azure-service-principal.sp_clientSecret)
    ARM_SUBSCRIPTION_ID: $(azure-service-principal.sp_subscriptionId)
    ARM_TENANT_ID: $(azure-service-principal.sp_tenantId)
  displayName: 'Plan Terraform changes to Port'
  condition: succeeded()

- script: |
    terraform apply -auto-approve -input=false tfport
  env:
    TF_VAR_port_client_id: PORT_CLIENT_ID
    TF_VAR_port_client_secret: PORT_CLIENT_SECRET
    ARM_CLIENT_ID: $(azure-service-principal.sp_clientId)
    ARM_CLIENT_SECRET: $(azure-service-principal.sp_clientSecret)
    ARM_SUBSCRIPTION_ID: $(azure-service-principal.sp_subscriptionId)
    ARM_TENANT_ID: $(azure-service-principal.sp_tenantId)
  displayName: 'Applying Terraform changes to Port'
  condition: succeeded()

- bash: |
    curl -s -f -H "Content-type: application/json" \
         -H "Authorization: Bearer $(accessToken)" \
         -X POST "https://api.getport.io/v1/actions/runs/${{ variables.PORT_RUN_ID }}" \
         -d '{"message": "Created port entity for blueprint ${{ variables.BLUEPRINT_ID }}"}'
  displayName: Notify Port
     

- script: |
    completedAt=$(date -u +%Y-%m-%dT%H:%M:%S.000Z)
    terraform_output=$(terraform output endpoint_url | sed 's/"//g')
    echo ${terraform_output}

    curl -X POST \
      -H 'Content-Type: application/json' \
      -H 'Authorization: Bearer $(accessToken)' \
      -d '{
          "status": "SUCCESS",
          "message": {"run_status":"Completed resource creation at $(completedAt)", "url":"$(terraform_output)" }
        }' \
      "https://api.getport.io/v1/actions/runs/${{ variables.PORT_RUN_ID }}"
  displayName: "Update Run Status"
