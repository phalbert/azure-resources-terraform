trigger: none

# pool:
#   vmImage: 'ubuntu-latest'
pool: Default


resources:
  webhooks:
    - webhook: PortWebhook
      connection: PortWebhook

variables:
- group: port-credentials
- name: PORT_RUN_ID
  value: ${{ parameters.PortWebhook.context.runId }}
- name: BLUEPRINT_ID
  value: ${{ parameters.PortWebhook.context.blueprint }}
- name: SERVICE_NAME
  value: ${{ parameters.PortWebhook.payload.properties.service_name }}
- name: DESCRIPTION
  value: ${{ parameters.PortWebhook.payload.properties.description }}
- name: STORAGE_NAME
  value: ${{ parameters.PortWebhook.payload.properties.storage_name }}
- name: STORAGE_LOCATION
  value: ${{ parameters.PortWebhook.payload.properties.storage_location }}


steps:

- checkout: self
  displayName: 'Checkout repository'

- bash: |
    startedAt=$(date -u +%Y-%m-%dT%H:%M:%S.000Z)
    echo "##vso[task.setvariable variable=startedAt]$startedAt"
    echo "Started at $startedAt"

- script: |
    apt-get update
    apt-get install -y jq
- script: |
    accessToken=$(curl -X POST \
          -H 'Content-Type: application/json' \
          -d '{"clientId": "$(PORT_CLIENT_ID)", "clientSecret": "$(PORT_CLIENT_SECRET)"}' \
          -s 'https://api.getport.io/v1/auth/access_token' | jq -r '.accessToken')
    echo "##vso[task.setvariable variable=accessToken;isOutput=true]$accessToken"
    echo "Token: $accessToken"
  displayName: Fetch Access Token and Run ID
  name: getToken

- bash: |
    echo "ARM_CLIENT_ID: ${ARM_CLIENT_ID}"
    terraform init -input=false
  displayName: Initialize configuration
  failOnStderr: true

- script: |
    terraform validate
  displayName: 'Terraform Validate'

- task: Bash@3
  name: 'terraform_plan_azure'
  displayName: 'Plan Terraform changes to Azure'
  condition: succeeded()
  env:
    TF_VAR_resource_group_name: arete-resources
    TF_VAR_port_client_id: $(PORT_CLIENT_ID)
    TF_VAR_port_client_secret: $(PORT_CLIENT_SECRET)
    TF_VAR_port_run_id: ${PORT_RUN_ID}
  inputs:
    targetType: 'inline'
    script: |
      set -euo pipefail
      echo "${ARM_CLIENT_ID}"

      terraform plan \
        -input=false \
        -out=tfazure-${BUILD_BUILDNUMBER}.tfplan \
        -var="storage_account_name=${STORAGE_NAME}" \
        -var="location=${STORAGE_LOCATION}" \
        -target=azurerm_storage_account.storage_account

      terraform apply -auto-approve -input=false tfazure-${BUILD_BUILDNUMBER}.tfplan


- task: Bash@3
  name: 'terraform_plan_port'
  displayName: 'Plan Terraform changes to Port'
  condition: succeeded()
  env:
    TF_VAR_resource_group_name: arete-resources
    TF_VAR_port_client_id: $(PORT_CLIENT_ID)
    TF_VAR_port_client_secret: $(PORT_CLIENT_SECRET)
    TF_VAR_port_run_id: ${PORT_RUN_ID}
  inputs:
    targetType: 'inline'
    script: |
      set -euo pipefail
      echo "${ARM_CLIENT_ID}"

      terraform plan \
        -input=false \
        -out=tfport-${BUILD_BUILDNUMBER}.tfplan \
        -var="storage_account_name=${STORAGE_NAME}" \
        -var="location=${STORAGE_LOCATION}" 

      terraform apply -auto-approve -input=false tfport-${BUILD_BUILDNUMBER}.tfplan


- bash: |
    curl -s -f -H "Content-type: application/json" \
         -H "Authorization: Bearer $(accessToken)" \
         -X POST "https://api.getport.io/v1/actions/runs/${{ variables.PORT_RUN_ID }}" \
         -d '{"message": "Created port entity for blueprint ${{ variables.BLUEPRINT_ID }}"}'
  displayName: Notify Port
     

- script: |
    completedAt=$(date -u +%Y-%m-%dT%H:%M:%S.000Z)
    terraform_output=$(terraform output endpoint_url | sed 's/"//g')
    echo ${terraform_output}

    curl -X POST \
      -H 'Content-Type: application/json' \
      -H 'Authorization: Bearer $(accessToken)' \
      -d '{
          "status": "SUCCESS",
          "message": {"run_status":"Completed resource creation at $(completedAt)", "url":"$(terraform_output)" }
        }' \
      "https://api.getport.io/v1/actions/runs/${{ variables.PORT_RUN_ID }}"
  displayName: "Update Run Status"
